// <auto-generated />
using System;
using Gotoair.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gotoair.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231110002729_CreateDB")]
    partial class CreateDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-rc.2.23480.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Gotoair.Models.Airplane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AirplaneModelId")
                        .HasColumnType("int");

                    b.Property<int>("AirplaneStateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfManufacture")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.HasKey("Id");

                    b.HasIndex("AirplaneModelId");

                    b.HasIndex("AirplaneStateId");

                    b.ToTable("Airplanes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AirplaneModelId = 1,
                            AirplaneStateId = 1,
                            DateOfManufacture = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            SerialNumber = "DE23OI9"
                        },
                        new
                        {
                            Id = 2,
                            AirplaneModelId = 2,
                            AirplaneStateId = 2,
                            DateOfManufacture = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            SerialNumber = "V098GF1"
                        },
                        new
                        {
                            Id = 3,
                            AirplaneModelId = 3,
                            AirplaneStateId = 3,
                            DateOfManufacture = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            SerialNumber = "NBP345Q"
                        },
                        new
                        {
                            Id = 4,
                            AirplaneModelId = 4,
                            AirplaneStateId = 1,
                            DateOfManufacture = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            SerialNumber = "3423OI9"
                        },
                        new
                        {
                            Id = 5,
                            AirplaneModelId = 2,
                            AirplaneStateId = 2,
                            DateOfManufacture = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            SerialNumber = "V066GF1"
                        },
                        new
                        {
                            Id = 6,
                            AirplaneModelId = 3,
                            AirplaneStateId = 3,
                            DateOfManufacture = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            SerialNumber = "00P345Q"
                        });
                });

            modelBuilder.Entity("Gotoair.Models.AirplaneModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("NumberOfCClassSeats")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfFClassSeats")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSClassSeats")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfFlightRangeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TypeOfFlightRangeId");

                    b.ToTable("AirplaneModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Name = "Airbus A350-900XWB \"Carbon Fiber\"",
                            NumberOfCClassSeats = 80,
                            NumberOfFClassSeats = 40,
                            NumberOfSClassSeats = 120,
                            TypeOfFlightRangeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            Name = "Airbus A321neo \"EXPO 2030\"",
                            NumberOfCClassSeats = 70,
                            NumberOfFClassSeats = 30,
                            NumberOfSClassSeats = 110,
                            TypeOfFlightRangeId = 1
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 2,
                            Name = "ATR 42-300",
                            NumberOfCClassSeats = 40,
                            NumberOfFClassSeats = 20,
                            NumberOfSClassSeats = 80,
                            TypeOfFlightRangeId = 2
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 2,
                            Name = "ATR 72-200",
                            NumberOfCClassSeats = 60,
                            NumberOfFClassSeats = 40,
                            NumberOfSClassSeats = 80,
                            TypeOfFlightRangeId = 3
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 6,
                            Name = "Boeing 777",
                            NumberOfCClassSeats = 40,
                            NumberOfFClassSeats = 20,
                            NumberOfSClassSeats = 80,
                            TypeOfFlightRangeId = 2
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = 6,
                            Name = "Boeing Bird of Prey",
                            NumberOfCClassSeats = 60,
                            NumberOfFClassSeats = 40,
                            NumberOfSClassSeats = 80,
                            TypeOfFlightRangeId = 3
                        });
                });

            modelBuilder.Entity("Gotoair.Models.AirplaneState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("AirplaneStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Активен"
                        },
                        new
                        {
                            Id = 2,
                            Name = "В ремонте"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Списан"
                        });
                });

            modelBuilder.Entity("Gotoair.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Одна из крупнейших авиастроительных компаний в мире, образованная в конце 1960-х годов путём слияния нескольких европейских авиапроизводителей. Производит пассажирские, грузовые и военно-транспортные самолёты под маркой Airbus.",
                            Name = "Airbus"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Франко-итальянский производитель авиационной техники, созданный в 1981 году компаниями Aérospatiale (ныне Airbus, Франция) и Aeritalia (ныне Alenia Aeronautica, Италия). Выпускает турбовинтовые региональные пассажирские самолёты ATR 42 и ATR 72.",
                            Name = "ATR"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Шведская авиастроительная и оборонная компания, в прошлом также была известна своими автомобилями.",
                            Name = "Saab AB"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Российская авиастроительная корпорация, одна из крупнейших в Европе. Объединяет крупные авиастроительные предприятия России.",
                            Name = "ОАК"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Советское, а затем украинское государственное предприятие, основной сферой деятельности которого являются грузовые авиаперевозки, а также разработка, производство и ремонт самолётов серии «Ан».",
                            Name = "АНТК им. О.К. Антонова"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Американская корпорация, один из крупнейших в мире производителей авиационной, космической и военной техники.",
                            Name = "Boeing"
                        });
                });

            modelBuilder.Entity("Gotoair.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AirplaneId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAndTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateAndTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeCSeats")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeFSeats")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeSSeats")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfTransportationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AirplaneId");

                    b.HasIndex("RouteId");

                    b.HasIndex("TypeOfTransportationId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AirplaneId = 1,
                            DateAndTimeEnd = new DateTime(2023, 11, 14, 3, 27, 28, 299, DateTimeKind.Local).AddTicks(8153),
                            DateAndTimeStart = new DateTime(2023, 11, 13, 3, 27, 28, 299, DateTimeKind.Local).AddTicks(8146),
                            FreeCSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            FreeFSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            FreeSSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            RouteId = 1,
                            TypeOfTransportationId = 1
                        },
                        new
                        {
                            Id = 2,
                            AirplaneId = 2,
                            DateAndTimeEnd = new DateTime(2023, 11, 16, 3, 27, 28, 299, DateTimeKind.Local).AddTicks(8157),
                            DateAndTimeStart = new DateTime(2023, 11, 15, 3, 27, 28, 299, DateTimeKind.Local).AddTicks(8156),
                            FreeCSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            FreeFSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            FreeSSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            RouteId = 2,
                            TypeOfTransportationId = 3
                        },
                        new
                        {
                            Id = 3,
                            AirplaneId = 3,
                            DateAndTimeEnd = new DateTime(2023, 11, 20, 3, 27, 28, 299, DateTimeKind.Local).AddTicks(8161),
                            DateAndTimeStart = new DateTime(2023, 11, 19, 3, 27, 28, 299, DateTimeKind.Local).AddTicks(8161),
                            FreeCSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            FreeFSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            FreeSSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            RouteId = 3,
                            TypeOfTransportationId = 2
                        },
                        new
                        {
                            Id = 4,
                            AirplaneId = 1,
                            DateAndTimeEnd = new DateTime(2023, 11, 26, 3, 27, 28, 299, DateTimeKind.Local).AddTicks(8165),
                            DateAndTimeStart = new DateTime(2023, 11, 25, 3, 27, 28, 299, DateTimeKind.Local).AddTicks(8164),
                            FreeCSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            FreeFSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            FreeSSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            RouteId = 4,
                            TypeOfTransportationId = 3
                        },
                        new
                        {
                            Id = 5,
                            AirplaneId = 5,
                            DateAndTimeEnd = new DateTime(2023, 11, 27, 3, 27, 28, 299, DateTimeKind.Local).AddTicks(8168),
                            DateAndTimeStart = new DateTime(2023, 11, 25, 3, 27, 28, 299, DateTimeKind.Local).AddTicks(8167),
                            FreeCSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            FreeFSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            FreeSSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            RouteId = 2,
                            TypeOfTransportationId = 1
                        },
                        new
                        {
                            Id = 6,
                            AirplaneId = 6,
                            DateAndTimeEnd = new DateTime(2023, 12, 2, 3, 27, 28, 299, DateTimeKind.Local).AddTicks(8170),
                            DateAndTimeStart = new DateTime(2023, 11, 30, 3, 27, 28, 299, DateTimeKind.Local).AddTicks(8170),
                            FreeCSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            FreeFSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            FreeSSeats = "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
                            RouteId = 3,
                            TypeOfTransportationId = 1
                        });
                });

            modelBuilder.Entity("Gotoair.Models.FlightSeatClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SeatClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("SeatClassId");

                    b.ToTable("FlightsSeatClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FlightId = 1,
                            Price = 245.50m,
                            SeatClassId = 3
                        },
                        new
                        {
                            Id = 2,
                            FlightId = 1,
                            Price = 125.50m,
                            SeatClassId = 2
                        },
                        new
                        {
                            Id = 3,
                            FlightId = 1,
                            Price = 65.50m,
                            SeatClassId = 1
                        },
                        new
                        {
                            Id = 4,
                            FlightId = 2,
                            Price = 275.50m,
                            SeatClassId = 3
                        },
                        new
                        {
                            Id = 5,
                            FlightId = 2,
                            Price = 195.00m,
                            SeatClassId = 2
                        },
                        new
                        {
                            Id = 6,
                            FlightId = 2,
                            Price = 85.50m,
                            SeatClassId = 1
                        },
                        new
                        {
                            Id = 7,
                            FlightId = 3,
                            Price = 175.50m,
                            SeatClassId = 3
                        },
                        new
                        {
                            Id = 8,
                            FlightId = 3,
                            Price = 105.00m,
                            SeatClassId = 2
                        },
                        new
                        {
                            Id = 9,
                            FlightId = 3,
                            Price = 45.50m,
                            SeatClassId = 1
                        },
                        new
                        {
                            Id = 10,
                            FlightId = 4,
                            Price = 200.50m,
                            SeatClassId = 3
                        },
                        new
                        {
                            Id = 11,
                            FlightId = 4,
                            Price = 135.00m,
                            SeatClassId = 2
                        },
                        new
                        {
                            Id = 12,
                            FlightId = 4,
                            Price = 55.50m,
                            SeatClassId = 1
                        },
                        new
                        {
                            Id = 13,
                            FlightId = 5,
                            Price = 130.50m,
                            SeatClassId = 3
                        },
                        new
                        {
                            Id = 14,
                            FlightId = 5,
                            Price = 75.00m,
                            SeatClassId = 2
                        },
                        new
                        {
                            Id = 15,
                            FlightId = 5,
                            Price = 25.50m,
                            SeatClassId = 1
                        },
                        new
                        {
                            Id = 16,
                            FlightId = 6,
                            Price = 136.50m,
                            SeatClassId = 3
                        },
                        new
                        {
                            Id = 17,
                            FlightId = 6,
                            Price = 68.00m,
                            SeatClassId = 2
                        },
                        new
                        {
                            Id = 18,
                            FlightId = 6,
                            Price = 45.50m,
                            SeatClassId = 1
                        });
                });

            modelBuilder.Entity("Gotoair.Models.FlightSeatClassUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FlightSeatClassId")
                        .HasColumnType("int");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FlightSeatClassId");

                    b.HasIndex("UserId");

                    b.ToTable("FlightsSeatClassesUsers");
                });

            modelBuilder.Entity("Gotoair.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressFrom = "Лондон",
                            AddressTo = "Брюссель",
                            Name = "Аэропорт Хитроу - Аэропорт Брюссель"
                        },
                        new
                        {
                            Id = 2,
                            AddressFrom = "Эдинбург",
                            AddressTo = "Порту",
                            Name = "Аэропорт Эдинбург - Аэропорт имени Франсишку ди Са Карнейру"
                        },
                        new
                        {
                            Id = 3,
                            AddressFrom = "Бристоль",
                            AddressTo = "Пуэрто-дель-Росарио",
                            Name = "Международный аэропорт Бристоль - Аэропорт Фуэртевентура"
                        },
                        new
                        {
                            Id = 4,
                            AddressFrom = "Лондон",
                            AddressTo = "Эдинбург",
                            Name = "Аэропорт Лондон-Сити - Аэропорт Эдинбург"
                        },
                        new
                        {
                            Id = 5,
                            AddressFrom = "Пуэрто-дель-Росарио",
                            AddressTo = "Брюссель",
                            Name = "Аэропорт Фуэртевентура - Аэропорт Брюссель"
                        });
                });

            modelBuilder.Entity("Gotoair.Models.SeatClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.ToTable("SeatClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Эконом-класс",
                            Name = "S"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Бизнес-класс",
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Первый класс",
                            Name = "F"
                        });
                });

            modelBuilder.Entity("Gotoair.Models.TypeOfFlightRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("TypesOfFlightRanges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Свыше 6000 км (или свыше 8000 км).",
                            Name = "Дальнемагистральный"
                        },
                        new
                        {
                            Id = 2,
                            Description = "От 2500 до 6000 км (или до 8000 км).",
                            Name = "Среднемагистральный"
                        },
                        new
                        {
                            Id = 3,
                            Description = "От 1000 до 2500 км.",
                            Name = "Ближнемагистральный"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Менее 1000 км.",
                            Name = "Самолёты местных воздушных линий"
                        });
                });

            modelBuilder.Entity("Gotoair.Models.TypeOfTransportation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("TypesOfTransportations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "На международных перевозках обычно используют дальне- и среднемагистральные самолёты.",
                            Name = "Международный"
                        },
                        new
                        {
                            Id = 2,
                            Description = "На региональных перевозках обычно используют ближнемагистральные или среднемагистральные самолёты с пассажиро-вместимостью 20-100 пассажиров и полетами на расстояние до 3 тысяч километров.",
                            Name = "Региональный"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Самолёты, предназначенные для перевозки малого числа пассажиров (до 20) на расстояния до 1000 километров.",
                            Name = "Местный"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Gotoair.Models.Airplane", b =>
                {
                    b.HasOne("Gotoair.Models.AirplaneModel", "AirplaneModel")
                        .WithMany()
                        .HasForeignKey("AirplaneModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gotoair.Models.AirplaneState", "AirplaneState")
                        .WithMany()
                        .HasForeignKey("AirplaneStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AirplaneModel");

                    b.Navigation("AirplaneState");
                });

            modelBuilder.Entity("Gotoair.Models.AirplaneModel", b =>
                {
                    b.HasOne("Gotoair.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gotoair.Models.TypeOfFlightRange", "TypeOfFlightRange")
                        .WithMany()
                        .HasForeignKey("TypeOfFlightRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("TypeOfFlightRange");
                });

            modelBuilder.Entity("Gotoair.Models.Flight", b =>
                {
                    b.HasOne("Gotoair.Models.Airplane", "Airplane")
                        .WithMany()
                        .HasForeignKey("AirplaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gotoair.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gotoair.Models.TypeOfTransportation", "TypeOfTransportation")
                        .WithMany()
                        .HasForeignKey("TypeOfTransportationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airplane");

                    b.Navigation("Route");

                    b.Navigation("TypeOfTransportation");
                });

            modelBuilder.Entity("Gotoair.Models.FlightSeatClass", b =>
                {
                    b.HasOne("Gotoair.Models.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gotoair.Models.SeatClass", "SeatClass")
                        .WithMany()
                        .HasForeignKey("SeatClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("SeatClass");
                });

            modelBuilder.Entity("Gotoair.Models.FlightSeatClassUser", b =>
                {
                    b.HasOne("Gotoair.Models.FlightSeatClass", "FlightSeatClass")
                        .WithMany()
                        .HasForeignKey("FlightSeatClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightSeatClass");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
